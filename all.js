// Generated by CoffeeScript 1.8.0
(function() {
  var Blip, Circle, Game, Habitat, V2, V2Polar;

  Habitat = (function() {
    function Habitat(game, attrs) {
      var k, v;
      this.game = game;
      if (attrs == null) {
        attrs = {};
      }
      for (k in attrs) {
        v = attrs[k];
        this[k] = v;
      }
    }

    return Habitat;

  })();

  Blip = (function() {
    function Blip(game, attrs) {
      var k, v, _ref;
      this.game = game;
      this.attrs = attrs != null ? attrs : {};
      _ref = this.attrs;
      for (k in _ref) {
        v = _ref[k];
        this[k] = v;
      }
    }

    Blip.prototype.live = function() {
      var b, clone, d, destDistance, destination, goTowards, goVector, h, _i, _j, _len, _len1, _ref, _ref1;
      destination = null;
      destDistance = 1 / 0;
      _ref = this.game.habitats;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        h = _ref[_i];
        d = this.circle.touchDistance(h.circle);
        if (d < destDistance) {
          destination = h;
          destDistance = d;
        }
      }
      if (destination != null) {
        goTowards = destination.circle.center;
        goVector = goTowards.minus(this.circle.center);
        goVector = goVector.withMagnitude(Math.min(this.speed, goVector.magnitude()));
        this.circle = this.circle.move(goVector);
        _ref1 = this.game.blips;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          b = _ref1[_j];
          if (b !== this) {
            this.circle = this.circle.pushBack(b.circle);
          }
        }
      }
      if (this.inHabitat()) {
        this.health = Math.min(this.maxHealth, this.health + 1);
        if (this.health / this.maxHealth > 0.95 && Math.random() > 0.99) {
          clone = new Blip(this.game, this.attrs);
          clone.circle = this.circle;
          this.health /= 2;
          clone.health = this.health;
          this.game.newBlips.push(clone);
          this.game.births++;
        }
      } else {
        this.health -= 1;
      }
      if (this.health <= 0) {
        this.game.deaths++;
        return false;
      } else {
        return true;
      }
    };

    Blip.prototype.inHabitat = function() {
      var h, _i, _len, _ref;
      _ref = this.game.habitats;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        h = _ref[_i];
        if (this.circle.inside(h.circle)) {
          return true;
        }
      }
      return false;
    };

    return Blip;

  })();

  Circle = (function() {
    function Circle(attrs) {
      var k, v;
      if (attrs == null) {
        attrs = {};
      }
      for (k in attrs) {
        v = attrs[k];
        this[k] = v;
      }
    }

    Circle.prototype.touchDistance = function(other) {
      return this.centerDistance(other) - this.radius - other.radius;
    };

    Circle.prototype.centerDistance = function(other) {
      return this.center.distance(other.center);
    };

    Circle.prototype.inside = function(other) {
      return this.radius <= other.radius && this.centerDistance(other) < other.radius - this.radius;
    };

    Circle.prototype.move = function(v) {
      return new Circle({
        center: this.center.plus(v),
        radius: this.radius
      });
    };

    Circle.prototype.pushBack = function(other) {
      var d;
      d = this.touchDistance(other);
      if (d >= 0) {
        return this;
      }
      return this.move(V2Polar(-d, this.center.minus(other.center).angle() + Math.random() - 0.5));
    };

    return Circle;

  })();

  V2 = (function() {
    function V2(x, y) {
      this.x = x;
      this.y = y;
    }

    V2.prototype.plus = function(_arg) {
      var x, y;
      x = _arg.x, y = _arg.y;
      return new V2(this.x + x, this.y + y);
    };

    V2.prototype.minus = function(_arg) {
      var x, y;
      x = _arg.x, y = _arg.y;
      return new V2(this.x - x, this.y - y);
    };

    V2.prototype.times = function(_arg) {
      var x, y;
      x = _arg.x, y = _arg.y;
      return new V2(this.x * x, this.y * y);
    };

    V2.prototype.distance = function(_arg) {
      var x, y;
      x = _arg.x, y = _arg.y;
      return Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2));
    };

    V2.prototype.magnitude = function() {
      return this.distance(new V2(0, 0));
    };

    V2.prototype.angle = function() {
      return Math.atan2(this.y, this.x);
    };

    V2.prototype.withMagnitude = function(r) {
      return V2Polar(r, this.angle());
    };

    V2.prototype.withAngle = function(theta) {
      return V2Polar(this.magnitude(), theta);
    };

    return V2;

  })();

  V2Polar = function(r, theta) {
    return new V2(r * Math.cos(theta), r * Math.sin(theta));
  };

  Game = (function() {
    function Game(canvas) {
      var x;
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.habitats = [
        new Habitat(this, {
          circle: new Circle({
            center: new V2(35, 35),
            radius: 40
          })
        }), new Habitat(this, {
          circle: new Circle({
            center: new V2(0, 0),
            radius: 20
          })
        }), new Habitat(this, {
          circle: new Circle({
            center: new V2(-70, 0),
            radius: 40
          })
        })
      ];
      this.blips = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 10; _i <= 35; x = _i += 5) {
          _results.push(new Blip(this, {
            circle: new Circle({
              center: new V2(x, 0),
              radius: 5
            }),
            speed: 1,
            breed: [300, 400, 500, 600, 700],
            maxHealth: 150,
            health: 100
          }));
        }
        return _results;
      }).call(this);
      this.center = new V2(0, 0);
      this.zoom = 3;
      this.births = 0;
      this.deaths = 0;
    }

    Game.prototype.drawCircle = function(x, y, r, fill) {
      this.ctx.beginPath();
      this.ctx.arc(x, y, r, 0, 2 * Math.PI, false);
      this.ctx.fillStyle = fill;
      return this.ctx.fill();
    };

    Game.prototype.draw = function() {
      var b, canvasCenter, h, r, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      this.ctx.fillStyle = '#ddb';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      canvasCenter = new V2(this.canvas.width * 0.5, this.canvas.height * 0.5);
      _ref = this.habitats;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        h = _ref[_i];
        _ref1 = h.circle.center.minus(this.center).times(new V2(this.zoom, this.zoom)).plus(canvasCenter), x = _ref1.x, y = _ref1.y;
        r = h.circle.radius * this.zoom;
        this.drawCircle(x, y, r, '#05a');
      }
      _ref2 = this.blips;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        b = _ref2[_j];
        _ref3 = b.circle.center.minus(this.center).times(new V2(this.zoom, this.zoom)).plus(canvasCenter), x = _ref3.x, y = _ref3.y;
        r = b.circle.radius * this.zoom;
        this.ctx.globalAlpha = b.health / (b.maxHealth * 0.85);
        this.drawCircle(x, y, r, b.inHabitat() ? '#1a5' : '#633');
        this.ctx.globalAlpha = 1;
      }
      this.ctx.fillStyle = 'black';
      this.ctx.font = '20px monospace';
      this.ctx.fillText("Viewing (" + (this.center.x.toFixed(3)) + ", " + (this.center.y.toFixed(3)) + ")", 10, 25);
      return this.ctx.fillText("" + this.births + " births, " + this.deaths + " deaths", 10, 50);
    };

    Game.prototype.mousedown = function(clickPosn) {
      this.clickPosn = clickPosn;
      return this.clickCenter = this.center;
    };

    Game.prototype.mousemove = function(posn) {
      var offset;
      if (this.clickPosn != null) {
        offset = posn.minus(this.clickPosn).times(new V2(1 / this.zoom, 1 / this.zoom));
        this.center = this.clickCenter.minus(offset);
        return this.draw();
      }
    };

    Game.prototype.mouseup = function(posn) {
      this.mousemove(posn);
      return delete this.clickPosn;
    };

    Game.prototype.tick = function() {
      var b;
      this.newBlips = [];
      this.blips = (function() {
        var _i, _len, _ref, _results;
        _ref = this.blips;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          if (b.live()) {
            _results.push(b);
          }
        }
        return _results;
      }).call(this);
      return this.blips = this.blips.concat(this.newBlips);
    };

    return Game;

  })();

  $(document).ready(function() {
    var canvas, gameLoop, handle, resize;
    canvas = $('#the-canvas')[0];
    window.game = new Game(canvas);
    handle = function(mouseEvent) {
      return function(e) {
        var left, top, _ref;
        _ref = $('#the-canvas').offset(), left = _ref.left, top = _ref.top;
        return window.game[mouseEvent](new V2(e.pageX - left, e.pageY - top));
      };
    };
    $('#the-canvas').mousedown(handle('mousedown'));
    $(document).mousemove(handle('mousemove'));
    $(document).mouseup(handle('mouseup'));
    resize = function() {
      canvas.width = $(window).width();
      return canvas.height = $(window).height();
    };
    resize();
    $(window).resize(function() {
      return resize();
    });
    return (gameLoop = function() {
      window.game.tick();
      window.game.draw();
      return requestAnimationFrame(gameLoop);
    })();
  });

}).call(this);
